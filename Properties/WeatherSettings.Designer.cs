//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace heliomaster_wpf.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "15.5.0.0")]
    public sealed partial class WeatherSettings : global::System.Configuration.ApplicationSettingsBase {
        
        private static WeatherSettings defaultInstance = ((WeatherSettings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new WeatherSettings())));
        
        public static WeatherSettings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string WeatherID {
            get {
                return ((string)(this["WeatherID"]));
            }
            set {
                this["WeatherID"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"
                    <WeatherItem>
                        <Unit>%</Unit>
                        <Min>0</Min>
                        <Max>100</Max>
                        <IconKey>icon-cloud</IconKey>
                    </WeatherItem>
                ")]
        public global::heliomaster_wpf.WeatherItem CloudCover {
            get {
                return ((global::heliomaster_wpf.WeatherItem)(this["CloudCover"]));
            }
            set {
                this["CloudCover"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("\r\n                    <WeatherItem>\r\n                        <Unit>°C</Unit>\r\n   " +
            "                     <IsReversed>true</IsReversed>\r\n                    </Weathe" +
            "rItem>\r\n                ")]
        public global::heliomaster_wpf.WeatherItem DewPoint {
            get {
                return ((global::heliomaster_wpf.WeatherItem)(this["DewPoint"]));
            }
            set {
                this["DewPoint"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("\r\n                    <WeatherItem>\r\n                        <Unit>hPa</Unit>\r\n  " +
            "                      <Min>0</Min>\r\n                    </WeatherItem>\r\n        " +
            "        ")]
        public global::heliomaster_wpf.WeatherItem Pressure {
            get {
                return ((global::heliomaster_wpf.WeatherItem)(this["Pressure"]));
            }
            set {
                this["Pressure"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("\r\n                    <WeatherItem>\r\n                        <Unit>mm/h</Unit>\r\n " +
            "                       <Min>0</Min>\r\n                    </WeatherItem>\r\n       " +
            "         ")]
        public global::heliomaster_wpf.WeatherItem RainRate {
            get {
                return ((global::heliomaster_wpf.WeatherItem)(this["RainRate"]));
            }
            set {
                this["RainRate"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"
                    <WeatherItem>
                        <Unit>lux</Unit>
                        <Min>0</Min>
                        <IsReversed>true</IsReversed>
                        <IconKey>icon-bulb</IconKey>
                    </WeatherItem>
                ")]
        public global::heliomaster_wpf.WeatherItem SkyBrightness {
            get {
                return ((global::heliomaster_wpf.WeatherItem)(this["SkyBrightness"]));
            }
            set {
                this["SkyBrightness"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("\r\n                    <WeatherItem>\r\n                        <IsReversed>true</Is" +
            "Reversed>\r\n                        <IconKey>icon-thumb</IconKey>\r\n              " +
            "      </WeatherItem>\r\n                ")]
        public global::heliomaster_wpf.WeatherItem SkyQuality {
            get {
                return ((global::heliomaster_wpf.WeatherItem)(this["SkyQuality"]));
            }
            set {
                this["SkyQuality"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("\r\n                    <WeatherItem>\r\n                        <Unit>°C</Unit>\r\n   " +
            "                     <ValueFormat>{0:F1}</ValueFormat>\r\n                    </We" +
            "atherItem>\r\n                ")]
        public global::heliomaster_wpf.WeatherItem SkyTemperature {
            get {
                return ((global::heliomaster_wpf.WeatherItem)(this["SkyTemperature"]));
            }
            set {
                this["SkyTemperature"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("\r\n                    <WeatherItem>\r\n                        <Unit>\"</Unit>\r\n    " +
            "                    <Min>0</Min>\r\n                        <IconKey>icon-eye</Ico" +
            "nKey>\r\n                    </WeatherItem>\r\n                ")]
        public global::heliomaster_wpf.WeatherItem StarFWHM {
            get {
                return ((global::heliomaster_wpf.WeatherItem)(this["StarFWHM"]));
            }
            set {
                this["StarFWHM"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("\r\n                    <WeatherItem>\r\n                        <Unit>°C</Unit>\r\n   " +
            "                     <IsReversed>true</IsReversed>\r\n                        <Val" +
            "ueFormat>{0:F1}</ValueFormat>\r\n                    </WeatherItem>\r\n             " +
            "   ")]
        public global::heliomaster_wpf.WeatherItem Temperature {
            get {
                return ((global::heliomaster_wpf.WeatherItem)(this["Temperature"]));
            }
            set {
                this["Temperature"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"
                    <WeatherItem>
                        <Unit>°</Unit>
                        <Min>0</Min>
                        <Max>360</Max>
                        <Neglect>true</Neglect>
                    </WeatherItem>
                ")]
        public global::heliomaster_wpf.WeatherItem WindDirection {
            get {
                return ((global::heliomaster_wpf.WeatherItem)(this["WindDirection"]));
            }
            set {
                this["WindDirection"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("\r\n                    <WeatherItem>\r\n                        <Unit>m/s</Unit>\r\n  " +
            "                      <Min>0</Min>\r\n                    </WeatherItem>\r\n        " +
            "        ")]
        public global::heliomaster_wpf.WeatherItem WindGust {
            get {
                return ((global::heliomaster_wpf.WeatherItem)(this["WindGust"]));
            }
            set {
                this["WindGust"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("\r\n                    <WeatherItem>\r\n                        <Unit>m/s</Unit>\r\n  " +
            "                      <Min>0</Min>\r\n                    </WeatherItem>\r\n        " +
            "        ")]
        public global::heliomaster_wpf.WeatherItem WindSpeed {
            get {
                return ((global::heliomaster_wpf.WeatherItem)(this["WindSpeed"]));
            }
            set {
                this["WindSpeed"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"
                    <WeatherItem>
                        <Unit>%</Unit>
                        <Min>0</Min>
                        <Max>100</Max>
                        <ValueFormat>{0:F1}</ValueFormat>
                    </WeatherItem>
                ")]
        public global::heliomaster_wpf.WeatherItem Humidity {
            get {
                return ((global::heliomaster_wpf.WeatherItem)(this["Humidity"]));
            }
            set {
                this["Humidity"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("00:00:10")]
        public global::System.TimeSpan DriverRefresh {
            get {
                return ((global::System.TimeSpan)(this["DriverRefresh"]));
            }
            set {
                this["DriverRefresh"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool DoLog {
            get {
                return ((bool)(this["DoLog"]));
            }
            set {
                this["DoLog"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string LogFileFormat {
            get {
                return ((string)(this["LogFileFormat"]));
            }
            set {
                this["LogFileFormat"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("00:00:10")]
        public global::System.TimeSpan LogInterval {
            get {
                return ((global::System.TimeSpan)(this["LogInterval"]));
            }
            set {
                this["LogInterval"] = value;
            }
        }
    }
}
